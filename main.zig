const std = @import("std");
const print = std.debug.print;
const exit = std.os.exit;

const ConditionCodes = struct {
    z: u8 = 0,
    s: u8 = 0,
    p: u8 = 0,
    cy: u8 = 0,
    ac: u8 = 0,
    pad: u8 = 0,
};

const State8080 = struct {
    a: u8 = 0,
    b: u8 = 0,
    c: u8 = 0,
    d: u8 = 0,
    e: u8 = 0,
    h: u8 = 0,
    l: u8 = 0,
    sp: u16 = 0,
    pc: u16 = 0,
    memory: []const u8,
    cc: ConditionCodes = ConditionCodes,
    int_enable: u8 = 0,
};

pub fn main() void {
    const filename = "./invaders/invaders";
    const file = std.fs.cwd().openFile(filename, .{}) catch unreachable;
    var buffer: [100]u8 = undefined;
    file.seekTo(0) catch unreachable;
    const bytes_read = file.readAll(&buffer) catch unreachable;

    var pc: u8 = 0;
    var state = State8080{
        .memory = &buffer,
        .cc = ConditionCodes{},
    };

    while (state.pc < bytes_read) {
        pc += emulate8080p(&state);
        // pc += disassemble8080p(state.memory, pc);
    }
}

fn unimplementedInstruction(state: *State8080) void {
    state.pc = state.pc - 1;
    print("Error at 0x{x}: Unimplemented instruction \n", .{state.memory[state.pc]});
    exit(1);
}

fn emulate8080p(state: *State8080) u8 {
    const opcode = state.memory[state.pc];
    const pc = disassemble8080p(state.memory, state.pc);
    state.pc += 1;

    switch (opcode) {
        0x00 => {},
        0x01 => { // LXI B,D16
            state.b = state.memory[state.pc + 2];
            state.c = state.memory[state.pc + 1];
            state.pc += 2;
        },
        0x02 => { unimplementedInstruction(state); },
        0x03 => { unimplementedInstruction(state); },
        0x04 => { unimplementedInstruction(state); },
        0x05 => { unimplementedInstruction(state); },
        0x06 => { unimplementedInstruction(state); },
        0x07 => { unimplementedInstruction(state); },
        0x08 => { unimplementedInstruction(state); },
        0x09 => { unimplementedInstruction(state); },
        0x0a => { unimplementedInstruction(state); },
        0x0b => { unimplementedInstruction(state); },
        0x0c => { unimplementedInstruction(state); },
        0x0d => { unimplementedInstruction(state); },
        0x0e => { unimplementedInstruction(state); },
        0x0f => { unimplementedInstruction(state); },

        0x10 => { unimplementedInstruction(state); },
        0x11 => { unimplementedInstruction(state); },
        0x12 => { unimplementedInstruction(state); },
        0x13 => { unimplementedInstruction(state); },
        0x14 => { unimplementedInstruction(state); },
        0x15 => { unimplementedInstruction(state); },
        0x16 => { unimplementedInstruction(state); },
        0x17 => { unimplementedInstruction(state); },
        0x18 => { unimplementedInstruction(state); },
        0x19 => { unimplementedInstruction(state); },
        0x1a => { unimplementedInstruction(state); },
        0x1b => { unimplementedInstruction(state); },
        0x1c => { unimplementedInstruction(state); },
        0x1d => { unimplementedInstruction(state); },
        0x1e => { unimplementedInstruction(state); },
        0x1f => { unimplementedInstruction(state); },

        0x20 => { }, // NOP
        0x21 => { 
            state.h = state.memory[state.pc + 2];
            state.l = state.memory[state.pc + 1];
            state.pc += 2;
        },
        0x22 => { unimplementedInstruction(state); },
        0x23 => { unimplementedInstruction(state); },
        0x24 => { unimplementedInstruction(state); },
        0x25 => { unimplementedInstruction(state); },
        0x26 => { unimplementedInstruction(state); },
        0x27 => { unimplementedInstruction(state); },
        0x28 => { unimplementedInstruction(state); },
        0x29 => { unimplementedInstruction(state); },
        0x2a => { unimplementedInstruction(state); },
        0x2b => { unimplementedInstruction(state); },
        0x2c => { unimplementedInstruction(state); },
        0x2d => { unimplementedInstruction(state); },
        0x2e => { unimplementedInstruction(state); },
        0x2f => { unimplementedInstruction(state); },

        0x30 => { unimplementedInstruction(state); },
        0x31 => { unimplementedInstruction(state); },
        0x32 => { unimplementedInstruction(state); },
        0x33 => { unimplementedInstruction(state); },
        0x34 => { unimplementedInstruction(state); },
        0x35 => { 
            
        },
        0x36 => { unimplementedInstruction(state); },
        0x37 => { unimplementedInstruction(state); },
        0x38 => { unimplementedInstruction(state); },
        0x39 => { unimplementedInstruction(state); },
        0x3a => { unimplementedInstruction(state); },
        0x3b => { unimplementedInstruction(state); },
        0x3c => { unimplementedInstruction(state); },
        0x3d => { unimplementedInstruction(state); },
        0x3e => { unimplementedInstruction(state); },
        0x3f => { unimplementedInstruction(state); },

        0x40 => { unimplementedInstruction(state); },
        0x41 => { state.b = state.c; }, // MOV B,C
        0x42 => { state.b = state.d; }, // MOV B,D 
        0x43 => { state.b = state.e; }, // MOV B,E
        0x44 => { unimplementedInstruction(state); },
        0x45 => { unimplementedInstruction(state); },
        0x46 => { unimplementedInstruction(state); },
        0x47 => { unimplementedInstruction(state); },
        0x48 => { unimplementedInstruction(state); },
        0x49 => { unimplementedInstruction(state); },
        0x4a => { unimplementedInstruction(state); },
        0x4b => { unimplementedInstruction(state); },
        0x4c => { unimplementedInstruction(state); },
        0x4d => { unimplementedInstruction(state); },
        0x4e => { unimplementedInstruction(state); },
        0x4f => { unimplementedInstruction(state); },

        0x50 => { unimplementedInstruction(state); },
        0x51 => { unimplementedInstruction(state); },
        0x52 => { unimplementedInstruction(state); },
        0x53 => { unimplementedInstruction(state); },
        0x54 => { unimplementedInstruction(state); },
        0x55 => { unimplementedInstruction(state); },
        0x56 => { unimplementedInstruction(state); },
        0x57 => { unimplementedInstruction(state); },
        0x58 => { unimplementedInstruction(state); },
        0x59 => { unimplementedInstruction(state); },
        0x5a => { unimplementedInstruction(state); },
        0x5b => { unimplementedInstruction(state); },
        0x5c => { unimplementedInstruction(state); },
        0x5d => { unimplementedInstruction(state); },
        0x5e => { unimplementedInstruction(state); },
        0x5f => { unimplementedInstruction(state); },

        0x60 => { unimplementedInstruction(state); },
        0x61 => { unimplementedInstruction(state); },
        0x62 => { unimplementedInstruction(state); },
        0x63 => { unimplementedInstruction(state); },
        0x64 => { unimplementedInstruction(state); },
        0x65 => { unimplementedInstruction(state); },
        0x66 => { unimplementedInstruction(state); },
        0x67 => { unimplementedInstruction(state); },
        0x68 => { unimplementedInstruction(state); },
        0x69 => { unimplementedInstruction(state); },
        0x6a => { unimplementedInstruction(state); },
        0x6b => { unimplementedInstruction(state); },
        0x6c => { unimplementedInstruction(state); },
        0x6d => { unimplementedInstruction(state); },
        0x6e => { unimplementedInstruction(state); },
        0x6f => { unimplementedInstruction(state); },

        0x70 => { unimplementedInstruction(state); },
        0x71 => { unimplementedInstruction(state); },
        0x72 => { unimplementedInstruction(state); },
        0x73 => { unimplementedInstruction(state); },
        0x74 => { unimplementedInstruction(state); },
        0x75 => { unimplementedInstruction(state); },
        0x76 => { unimplementedInstruction(state); },
        0x77 => { unimplementedInstruction(state); },
        0x78 => { unimplementedInstruction(state); },
        0x79 => { unimplementedInstruction(state); },
        0x7a => { unimplementedInstruction(state); },
        0x7b => { unimplementedInstruction(state); },
        0x7c => { unimplementedInstruction(state); },
        0x7d => { unimplementedInstruction(state); },
        0x7e => { unimplementedInstruction(state); },
        0x7f => { unimplementedInstruction(state); },

        0x80 => { unimplementedInstruction(state); },
        0x81 => { unimplementedInstruction(state); },
        0x82 => { unimplementedInstruction(state); },
        0x83 => { unimplementedInstruction(state); },
        0x84 => { unimplementedInstruction(state); },
        0x85 => { unimplementedInstruction(state); },
        0x86 => { unimplementedInstruction(state); },
        0x87 => { unimplementedInstruction(state); },
        0x88 => { unimplementedInstruction(state); },
        0x89 => { unimplementedInstruction(state); },
        0x8a => { unimplementedInstruction(state); },
        0x8b => { unimplementedInstruction(state); },
        0x8c => { unimplementedInstruction(state); },
        0x8d => { unimplementedInstruction(state); },
        0x8e => { unimplementedInstruction(state); },
        0x8f => { unimplementedInstruction(state); },
        
        0x90 => { unimplementedInstruction(state); },
        0x91 => { unimplementedInstruction(state); },
        0x92 => { unimplementedInstruction(state); },
        0x93 => { unimplementedInstruction(state); },
        0x94 => { unimplementedInstruction(state); },
        0x95 => { unimplementedInstruction(state); },
        0x96 => { unimplementedInstruction(state); },
        0x97 => { unimplementedInstruction(state); },
        0x98 => { unimplementedInstruction(state); },
        0x99 => { unimplementedInstruction(state); },
        0x9a => { unimplementedInstruction(state); },
        0x9b => { unimplementedInstruction(state); },
        0x9c => { unimplementedInstruction(state); },
        0x9d => { unimplementedInstruction(state); },
        0x9e => { unimplementedInstruction(state); },
        0x9f => { unimplementedInstruction(state); },

        0xa0 => { unimplementedInstruction(state); },
        0xa1 => { unimplementedInstruction(state); },
        0xa2 => { unimplementedInstruction(state); },
        0xa3 => { unimplementedInstruction(state); },
        0xa4 => { unimplementedInstruction(state); },
        0xa5 => { unimplementedInstruction(state); },
        0xa6 => { unimplementedInstruction(state); },
        0xa7 => { unimplementedInstruction(state); },
        0xa8 => { unimplementedInstruction(state); },
        0xa9 => { unimplementedInstruction(state); },
        0xaa => { unimplementedInstruction(state); },
        0xab => { unimplementedInstruction(state); },
        0xac => { unimplementedInstruction(state); },
        0xad => { unimplementedInstruction(state); },
        0xae => { unimplementedInstruction(state); },
        0xaf => { unimplementedInstruction(state); },

        0xb0 => { unimplementedInstruction(state); },
        0xb1 => { unimplementedInstruction(state); },
        0xb2 => { unimplementedInstruction(state); },
        0xb3 => { unimplementedInstruction(state); },
        0xb4 => { unimplementedInstruction(state); },
        0xb5 => { unimplementedInstruction(state); },
        0xb6 => { unimplementedInstruction(state); },
        0xb7 => { unimplementedInstruction(state); },
        0xb8 => { unimplementedInstruction(state); },
        0xb9 => { unimplementedInstruction(state); },
        0xba => { unimplementedInstruction(state); },
        0xbb => { unimplementedInstruction(state); },
        0xbc => { unimplementedInstruction(state); },
        0xbd => { unimplementedInstruction(state); },
        0xbe => { unimplementedInstruction(state); },
        0xbf => { unimplementedInstruction(state); },

        0xc0 => { unimplementedInstruction(state); },
        0xc1 => { unimplementedInstruction(state); },
        0xc2 => { unimplementedInstruction(state); },
        0xc3 => { // JMP addr
            // print("{any} \n", .{state.pc});
            // state.pc = @as(u16, state.memory[state.pc + 2]) << 8 | state.memory[state.pc + 1]; 
            // print("{any} \n", .{state.pc});
            print("{any} \n", .{&state.memory[state.pc + 2]});
            print("{any} \n", .{&state.memory[state.pc]});
            //state.pc = state.memory[state.pc + 2];
        },
        0xc4 => { unimplementedInstruction(state); },
        0xc5 => { unimplementedInstruction(state); },
        0xc6 => { unimplementedInstruction(state); },
        0xc7 => { unimplementedInstruction(state); },
        0xc8 => { unimplementedInstruction(state); },
        0xc9 => { unimplementedInstruction(state); },
        0xca => { unimplementedInstruction(state); },
        0xcb => { unimplementedInstruction(state); },
        0xcc => { unimplementedInstruction(state); },
        0xcd => { unimplementedInstruction(state); },
        0xce => { unimplementedInstruction(state); },
        0xcf => { unimplementedInstruction(state); },

        0xd0 => { unimplementedInstruction(state); },
        0xd1 => { unimplementedInstruction(state); },
        0xd2 => { unimplementedInstruction(state); },
        0xd3 => { unimplementedInstruction(state); },
        0xd4 => { unimplementedInstruction(state); },
        0xd5 => { unimplementedInstruction(state); },
        0xd6 => { unimplementedInstruction(state); },
        0xd7 => { unimplementedInstruction(state); },
        0xd8 => { unimplementedInstruction(state); },
        0xd9 => { unimplementedInstruction(state); },
        0xda => { unimplementedInstruction(state); },
        0xdb => { unimplementedInstruction(state); },
        0xdc => { unimplementedInstruction(state); },
        0xdd => { unimplementedInstruction(state); },
        0xde => { unimplementedInstruction(state); },
        0xdf => { unimplementedInstruction(state); },

        0xe0 => { unimplementedInstruction(state); },
        0xe1 => { unimplementedInstruction(state); },
        0xe2 => { unimplementedInstruction(state); },
        0xe3 => { unimplementedInstruction(state); },
        0xe4 => { unimplementedInstruction(state); },
        0xe5 => { unimplementedInstruction(state); },
        0xe6 => { unimplementedInstruction(state); },
        0xe7 => { unimplementedInstruction(state); },
        0xe8 => { unimplementedInstruction(state); },
        0xe9 => { unimplementedInstruction(state); },
        0xea => { unimplementedInstruction(state); },
        0xeb => { unimplementedInstruction(state); },
        0xec => { unimplementedInstruction(state); },
        0xed => { unimplementedInstruction(state); },
        0xee => { unimplementedInstruction(state); },
        0xef => { unimplementedInstruction(state); },

        0xf0 => { unimplementedInstruction(state); },
        0xf1 => { unimplementedInstruction(state); },
        0xf2 => { unimplementedInstruction(state); },
        0xf3 => { unimplementedInstruction(state); },
        0xf4 => { unimplementedInstruction(state); },
        0xf5 => { unimplementedInstruction(state); },
        0xf6 => { unimplementedInstruction(state); },
        0xf7 => { unimplementedInstruction(state); },
        0xf8 => { unimplementedInstruction(state); },
        0xf9 => { unimplementedInstruction(state); },
        0xfa => { unimplementedInstruction(state); },
        0xfb => { unimplementedInstruction(state); },
        0xfc => { unimplementedInstruction(state); },
        0xfd => { unimplementedInstruction(state); },
        0xfe => { unimplementedInstruction(state); },
        0xff => { unimplementedInstruction(state); },
    }

    return pc;
}

fn disassemble8080p(codebuffer: []const u8, pc: u16) u8 {
    const code = codebuffer[pc];
    var opbytes: u8 = 1;
    print("{x:0>4} ", .{pc});
    switch (code) {
        0x00 => { print("NOP", .{}); },
        0x01 => { print("LXI    B,D#${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x02 => { print("STAX   B", .{}); },
        0x03 => { print("INX    B", .{}); },
        0x04 => { print("INR    B", .{}); },
        0x05 => { print("DCR    B", .{}); },
        0x06 => { print("MVI    B,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x07 => { print("RLC", .{}); },
        0x08 => { print("NOP", .{}); },
        0x09 => { print("DAD    B", .{}); },
        0x0a => { print("LDAX   B", .{}); },
        0x0b => { print("DCX    B", .{}); },
        0x0c => { print("INR    C", .{}); },
        0x0d => { print("DCR    C", .{}); },
        0x0e => { print("MVI    C,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x0f => { print("RRC", .{}); },

        0x10 => { print("NOP", .{}); },
        0x11 => { print("LXI    D,#${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x12 => { print("STAX   D", .{}); },
        0x13 => { print("INX    D", .{}); },
        0x14 => { print("INR    D", .{}); },
        0x15 => { print("DCR    D", .{}); },
        0x16 => { print("MVI    D#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x17 => { print("RAL", .{}); },
        0x18 => { print("NOP", .{}); },
        0x19 => { print("DAD    D", .{}); },
        0x1a => { print("LDAX   D", .{}); },
        0x1b => { print("DCX    D", .{}); },
        0x1c => { print("INR    E", .{}); },
        0x1d => { print("DCR    E", .{}); },
        0x1e => { print("MVI    E,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x1f => { print("RAR", .{}); },

        0x20 => { print("NOP", .{}); },
        0x21 => { print("LXI    H,#${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x22 => { print("SHLD   ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x23 => { print("INX    H", .{}); },
        0x24 => { print("INR    H", .{}); },
        0x25 => { print("DCR    H", .{}); },
        0x26 => { print("MVI    H,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x27 => { print("DAA", .{}); },
        0x28 => { print("NOP", .{}); },
        0x29 => { print("DAD    H", .{}); },
        0x2a => { print("LHLD   ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x2b => { print("DCX    H", .{}); },
        0x2c => { print("INR    L", .{}); },
        0x2d => { print("DCR    L", .{}); },
        0x2e => { print("MVI    L,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x2f => { print("CMA", .{}); },

        0x30 => { print("NOP", .{}); },
        0x31 => { print("LXI    SP,#${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x32 => { print("STA    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x33 => { print("INX    SP", .{}); },
        0x34 => { print("INR    M", .{}); },
        0x35 => { print("DCR    M", .{}); },
        0x36 => { print("MVI    M,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x37 => { print("STC", .{}); },
        0x38 => { print("NOP", .{}); },
        0x39 => { print("DAD    SP", .{}); },
        0x3a => { print("LDA    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0x3b => { print("DCX    SP", .{}); },
        0x3c => { print("INR    A", .{}); },
        0x3d => { print("DCR    A", .{}); },
        0x3e => { print("MVI    A,#${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0x3f => { print("CMA", .{}); },

        0x40 => { print("MOV    B,B", .{}); },
        0x41 => { print("MOV    B,C", .{}); },
        0x42 => { print("MOV    B,D", .{}); },
        0x43 => { print("MOV    B,E", .{}); },
        0x44 => { print("MOV    B,H", .{}); },
        0x45 => { print("MOV    B,L", .{}); },
        0x46 => { print("MOV    B,M", .{}); },
        0x47 => { print("MOV    B,A", .{}); },
        0x48 => { print("MOV    C,B", .{}); },
        0x49 => { print("MOV    C,C", .{}); },
        0x4a => { print("MOV    C,D", .{}); },
        0x4b => { print("MOV    C,E", .{}); },
        0x4c => { print("MOV    C,H", .{}); },
        0x4d => { print("MOV    C,L", .{}); },
        0x4e => { print("MOV    C,M", .{}); },
        0x4f => { print("MOV    C,A", .{}); },
        
        0x50 => { print("MOV    D,B", .{}); },
        0x51 => { print("MOV    D,C", .{}); },
        0x52 => { print("MOV    D,D", .{}); },
        0x53 => { print("MOV    D,E", .{}); },
        0x54 => { print("MOV    D,H", .{}); },
        0x55 => { print("MOV    D,L", .{}); },
        0x56 => { print("MOV    D,M", .{}); },
        0x57 => { print("MOV    D,A", .{}); },
        0x58 => { print("MOV    E,B", .{}); },
        0x59 => { print("MOV    E,C", .{}); },
        0x5a => { print("MOV    E,D", .{}); },
        0x5b => { print("MOV    E,E", .{}); },
        0x5c => { print("MOV    E,H", .{}); },
        0x5d => { print("MOV    E,L", .{}); },
        0x5e => { print("MOV    E,M", .{}); },
        0x5f => { print("MOV    E,A", .{}); },

        0x60 => { print("MOV    H,B", .{}); },
        0x61 => { print("MOV    H,C", .{}); },
        0x62 => { print("MOV    H,D", .{}); },
        0x63 => { print("MOV    H,E", .{}); },
        0x64 => { print("MOV    H,H", .{}); },
        0x65 => { print("MOV    H,L", .{}); },
        0x66 => { print("MOV    H,M", .{}); },
        0x67 => { print("MOV    H,A", .{}); },
        0x68 => { print("MOV    L,B", .{}); },
        0x69 => { print("MOV    L,C", .{}); },
        0x6a => { print("MOV    L,D", .{}); },
        0x6b => { print("MOV    L,E", .{}); },
        0x6c => { print("MOV    L,H", .{}); },
        0x6d => { print("MOV    L,L", .{}); },
        0x6e => { print("MOV    L,M", .{}); },
        0x6f => { print("MOV    L,A", .{}); },

        0x70 => { print("MOV    M,B", .{}); },
        0x71 => { print("MOV    M,C", .{}); },
        0x72 => { print("MOV    M,D", .{}); },
        0x73 => { print("MOV    M,E", .{}); },
        0x74 => { print("MOV    M,H", .{}); },
        0x75 => { print("MOV    M,L", .{}); },
        0x76 => { print("HLT", .{}); },
        0x77 => { print("MOV    M,A", .{}); },
        0x78 => { print("MOV    A,B", .{}); },
        0x79 => { print("MOV    A,C", .{}); },
        0x7a => { print("MOV    A,D", .{}); },
        0x7b => { print("MOV    A,E", .{}); },
        0x7c => { print("MOV    A,H", .{}); },
        0x7d => { print("MOV    A,L", .{}); },
        0x7e => { print("MOV    A,M", .{}); },
        0x7f => { print("MOV    A,A", .{}); },

        0x80 => { print("ADD    B", .{}); },
        0x81 => { print("ADD    C", .{}); },
        0x82 => { print("ADD    D", .{}); },
        0x83 => { print("ADD    E", .{}); },
        0x84 => { print("ADD    H", .{}); },
        0x85 => { print("ADD    L", .{}); },
        0x86 => { print("ADD    M", .{}); },
        0x87 => { print("ADD    A", .{}); },
        0x88 => { print("ADC    B", .{}); },
        0x89 => { print("ADC    C", .{}); },
        0x8a => { print("ADR    D", .{}); },
        0x8b => { print("ADR    E", .{}); },
        0x8c => { print("ADR    H", .{}); },
        0x8d => { print("ADR    L", .{}); },
        0x8e => { print("ADR    M", .{}); },
        0x8f => { print("ADR    A", .{}); },

        0x90 => { print("SUB    B", .{}); },
        0x91 => { print("SUB    C", .{}); },
        0x92 => { print("SUB    D", .{}); },
        0x93 => { print("SUB    E", .{}); },
        0x94 => { print("SUB    H", .{}); },
        0x95 => { print("SUB    L", .{}); },
        0x96 => { print("SUB    M", .{}); },
        0x97 => { print("SUB    A", .{}); },
        0x98 => { print("SBB    B", .{}); },
        0x99 => { print("SBB    C", .{}); },
        0x9a => { print("SBB    D", .{}); },
        0x9b => { print("SBB    E", .{}); },
        0x9c => { print("SBB    H", .{}); },
        0x9d => { print("SBB    L", .{}); },
        0x9e => { print("SBB    M", .{}); },
        0x9f => { print("SBB    A", .{}); },

        0xa0 => { print("ANA    B", .{}); },
        0xa1 => { print("ANA    C", .{}); },
        0xa2 => { print("ANA    D", .{}); },
        0xa3 => { print("ANA    E", .{}); },
        0xa4 => { print("ANA    H", .{}); },
        0xa5 => { print("ANA    L", .{}); },
        0xa6 => { print("ANA    M", .{}); },
        0xa7 => { print("ANA    A", .{}); },
        0xa8 => { print("XRA    B", .{}); },
        0xa9 => { print("XRA    C", .{}); },
        0xaa => { print("XRA    D", .{}); },
        0xab => { print("XRA    E", .{}); },
        0xac => { print("XRA    H", .{}); },
        0xad => { print("XRA    L", .{}); },
        0xae => { print("XRA    M", .{}); },
        0xaf => { print("XRA    A", .{}); },

        0xb0 => { print("ORA    B", .{}); },
        0xb1 => { print("ORA    C", .{}); },
        0xb2 => { print("ORA    D", .{}); },
        0xb3 => { print("ORA    E", .{}); },
        0xb4 => { print("ORA    H", .{}); },
        0xb5 => { print("ORA    L", .{}); },
        0xb6 => { print("ORA    M", .{}); },
        0xb7 => { print("ORA    A", .{}); },
        0xb8 => { print("CMP    B", .{}); },
        0xb9 => { print("CMP    C", .{}); },
        0xba => { print("CMP    D", .{}); },
        0xbb => { print("CMP    E", .{}); },
        0xbc => { print("CMP    H", .{}); },
        0xbd => { print("CMP    L", .{}); },
        0xbe => { print("CMP    M", .{}); },
        0xbf => { print("CMP    A", .{}); },

        0xc0 => { print("RNZ", .{}); },
        0xc1 => { print("POP    B", .{}); },
        0xc2 => { print("JNZ    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xc3 => { print("JMP    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xc4 => { print("CNZ    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xc5 => { print("PUSH   B", .{}); },
        0xc6 => { print("ADI    #${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xc7 => { print("RST    0", .{}); },
        0xc8 => { print("RZ", .{}); },
        0xc9 => { print("RET", .{}); },
        0xca => { print("JZ     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xcb => { print("JMP    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xcc => { print("CZ     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xcd => { print("CALL   ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xce => { print("ACI    #${x:0>2}", .{codebuffer[pc + 1]});  opbytes = 2; },
        0xcf => { print("RST    1", .{}); },
 
        0xd0 => { print("RNC", .{}); },
        0xd1 => { print("POP    D", .{}); },
        0xd2 => { print("JNC    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xd3 => { print("OUT    ${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xd4 => { print("CNC    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xd5 => { print("PUSH   D", .{}); },
        0xd6 => { print("SUI    #${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xd7 => { print("RST    2", .{}); },
        0xd8 => { print("RC", .{}); },
        0xd9 => { print("RET", .{}); },
        0xda => { print("JC     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xdb => { print("IN     #${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xdc => { print("CC     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xdd => { print("CALL   ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xde => { print("SBI    #${x:0>2}", .{codebuffer[pc + 1]});  opbytes = 2; },
        0xdf => { print("RST    3", .{}); },
 
        0xe0 => { print("RPO", .{}); },
        0xe1 => { print("POP    H", .{}); },
        0xe2 => { print("JPO    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xe3 => { print("XTHL", .{}); },
        0xe4 => { print("CPO    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xe5 => { print("PUSH   H", .{}); },
        0xe6 => { print("ANI    #${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xe7 => { print("RST    4", .{}); },
        0xe8 => { print("RPE", .{}); },
        0xe9 => { print("PCHL", .{}); },
        0xea => { print("JPE     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xeb => { print("XCHG", .{}); },
        0xec => { print("CPE    ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xed => { print("CALL   ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xee => { print("XRI    #${x:0>2}", .{codebuffer[pc + 1]});  opbytes = 2; },
        0xef => { print("RST    5", .{}); },
 
        0xf0 => { print("RP", .{}); },
        0xf1 => { print("POP    PSW", .{}); },
        0xf2 => { print("JP     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xf3 => { print("DI", .{}); },
        0xf4 => { print("CP     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xf5 => { print("PUSH   PSW", .{}); },
        0xf6 => { print("ORI    #${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xf7 => { print("RST    6", .{}); },
        0xf8 => { print("RM", .{}); },
        0xf9 => { print("SPHL", .{}); },
        0xfa => { print("JM     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xfb => { print("EI     ${x:0>2}", .{codebuffer[pc + 1]}); opbytes = 2; },
        0xfc => { print("CM     ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xfd => { print("CALL   ${x:0>2}{x:0>2}", .{codebuffer[pc + 2], codebuffer[pc + 1]}); opbytes = 3; },
        0xfe => { print("CPI    #${x:0>2}", .{codebuffer[pc + 1]});  opbytes = 2; },
        0xff => { print("RST    7", .{}); },
    } 
    print("\n", .{});
    return opbytes;
}

